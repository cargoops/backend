AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "StoringOrders/Packages backend with API Key\u2192Role mapping.\n"
Globals:
  Function:
    Runtime: python3.9
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        STORING_ORDERS_TABLE:
          Ref: StoringOrdersTable
        PACKAGES_TABLE:
          Ref: PackagesTable
        API_KEYS_TABLE:
          Ref: ApiKeysTable
Resources:
  StoringOrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StoringOrders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: storing_order_id
        AttributeType: S
      - AttributeName: receiver_id
        AttributeType: S
      KeySchema:
      - AttributeName: storing_order_id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: ReceiverIndex
        KeySchema:
        - AttributeName: receiver_id
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  PackagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Packages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: package_id
        AttributeType: S
      - AttributeName: storing_order_id
        AttributeType: S
      KeySchema:
      - AttributeName: package_id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: StoringOrderIndex
        KeySchema:
        - AttributeName: storing_order_id
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  ApiKeysTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: ApiKeys
      PrimaryKey:
        Name: api_key
        Type: String
  AuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - AuthorizerFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorizer.app.lambda_handler
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          Resource:
            Fn::GetAtt:
            - ApiKeysTable
            - Arn
      CodeUri: AuthorizerFunction
    Metadata:
      SamResourceId: AuthorizerFunction
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: StoringOrdersAPI
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - AuthorizerFunction
              - Arn
            Identity:
              Headers:
              - x-api-key
      Cors:
        AllowOrigin: '''*'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowMethods: '''OPTIONS,GET,POST,PUT'''
  ReadStoringOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read_storing_orders.app.lambda_handler
      Events:
        ReadStoringOrders:
          Type: Api
          Properties:
            Path: /storing-orders
            Method: get
            RestApiId:
              Ref: Api
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: StoringOrdersTable
      CodeUri: ReadStoringOrdersFunction
    Metadata:
      SamResourceId: ReadStoringOrdersFunction
  ReceiveOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: receive_order.app.lambda_handler
      Events:
        ReceiveOrder:
          Type: Api
          Properties:
            Path: /storing-orders/receive
            Method: post
            RestApiId:
              Ref: Api
      Policies:
      - DynamoDBCrudPolicy:
          TableName: StoringOrdersTable
      - DynamoDBCrudPolicy:
          TableName: PackagesTable
      CodeUri: ReceiveOrderFunction
    Metadata:
      SamResourceId: ReceiveOrderFunction
  UpdateDiscrepancyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_discrepancy.app.lambda_handler
      Events:
        UpdateDiscrepancy:
          Type: Api
          Properties:
            Path: /storing-orders/discrepancy
            Method: put
            RestApiId:
              Ref: Api
      Policies:
      - DynamoDBCrudPolicy:
          TableName: StoringOrdersTable
      CodeUri: UpdateDiscrepancyFunction
    Metadata:
      SamResourceId: UpdateDiscrepancyFunction
Outputs:
  ApiUrl:
    Description: Invoke URL
    Value:
      Fn::Sub: https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod
