AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Example Warehouse Management System with 4 Lambdas"

Globals:
  Function:
    Runtime: python3.9
    Timeout: 15
    MemorySize: 128
    Environment:
      Variables:
        MY_REGION: "us-east-2"
        STORING_ORDERS_TABLE: "StoringOrders"
        PACKAGES_TABLE: "Packages"
        PICKSLIPS_TABLE: "PickSlips"
        API_KEYS_TABLE: "api_keys"

Resources:
  ########################
  # Lambda Layer
  ########################
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependencies-layer
      Description: Dependencies for the application
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain

  ########################
  # API Gateway
  ########################
  WmsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,x-api-key'"
        AllowOrigin: "'*'"

  ########################
  # API Keys Table
  ########################
  ApiKeysTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: api_keys
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: key
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: key-index
          KeySchema:
            - AttributeName: key
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ########################
  # Initial Admin Key Function
  ########################
  InitAdminKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "initAdminKey"
      CodeUri: src/
      Handler: common.handlers.init_admin_key.lambda_handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        CreateInitialAdminKeyApi:
          Type: Api
          Properties:
            RestApiId: !Ref WmsApi
            Path: /init-admin-key
            Method: POST

  ########################
  # API Key Management Function
  ########################
  ApiKeyManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "apiKeyManagement"
      CodeUri: src/
      Handler: common.handlers.api_key_handler.create_api_key
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        CreateApiKeyApi:
          Type: Api
          Properties:
            RestApiId: !Ref WmsApi
            Path: /api-keys
            Method: POST

  ########################
  # 1) StoringOrderValidityCheck 함수
  ########################
  StoringOrderValidityCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "storingOrderValidityCheck"
      CodeUri: src/
      Handler: storingOrderValidityCheck.handler.lambda_handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        CheckStoringOrderApi:
          Type: Api
          Properties:
            RestApiId: !Ref WmsApi
            Path: /storing-order/check
            Method: POST

  ########################
  # 2) PackageQuery 함수
  ########################
  PackageQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "packageQuery"
      CodeUri: src/
      Handler: packageQuery.handler.lambda_handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        GetPackageApi:
          Type: Api
          Properties:
            RestApiId: !Ref WmsApi
            Path: /package
            Method: GET

  ########################
  # 3) PickSlipsScan 함수
  ########################
  PickSlipsScanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "pickSlipsScan"
      CodeUri: src/
      Handler: pickSlipsScan.handler.lambda_handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        GetPickSlipsApi:
          Type: Api
          Properties:
            RestApiId: !Ref WmsApi
            Path: /pickslips
            Method: GET

  ########################
  # 4) StoringOrdersScan 함수
  ########################
  StoringOrdersScanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "storingOrdersScan"
      CodeUri: src/
      Handler: storingOrdersScan.handler.lambda_handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        GetStoringOrdersApi:
          Type: Api
          Properties:
            RestApiId: !Ref WmsApi
            Path: /storing-orders
            Method: GET

  ########################
  # 5) PackagesScan 함수
  ########################
  PackagesScanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "packagesScan"
      CodeUri: src/
      Handler: packagesScan.handler.lambda_handler
      Layers:
        - !Ref DependenciesLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess
      Events:
        GetPackagesApi:
          Type: Api
          Properties:
            RestApiId: !Ref WmsApi
            Path: /packages
            Method: GET

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${WmsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
