AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  StoringOrders/Packages backend with API Key→Role mapping.

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        STORING_ORDERS_TABLE: !Ref StoringOrdersTable
        PACKAGES_TABLE:       !Ref PackagesTable
        API_KEYS_TABLE:       !Ref ApiKeysTable
        ITEMS_TABLE:          !Ref ItemsTable
        BINS_TABLE:           !Ref BinsTable
        PRODUCTS_TABLE:       !Ref ProductsTable
        INVENTORY_TABLE:      !Ref InventoryTable
        PICK_ORDERS_TABLE:    !Ref PickOrdersTable
        PICK_SLIPS_TABLE:     !Ref PickSlipsTable

Resources:

  # ─────── DynamoDB Tables ───────
  StoringOrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StoringOrders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: storing_order_id
          AttributeType: S
        - AttributeName: receiver_id
          AttributeType: S
      KeySchema:
        - AttributeName: storing_order_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ReceiverIndex
          KeySchema:
            - AttributeName: receiver_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Inventory
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: bin_id
          AttributeType: S
        - AttributeName: product_id
          AttributeType: S
        - AttributeName: quantity
          AttributeType: N
      KeySchema:
        - AttributeName: bin_id
          KeyType: HASH
        - AttributeName: product_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ProductQuantityIndex
          KeySchema:
            - AttributeName: product_id
              KeyType: HASH
            - AttributeName: quantity
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  PickOrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PickOrders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pick_order_id
          AttributeType: S
        - AttributeName: picker_id
          AttributeType: S
        - AttributeName: order_created_date
          AttributeType: S
        - AttributeName: pick_slip_id
          AttributeType: S
      KeySchema:
        - AttributeName: pick_order_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PickerStatusDateIndex
          KeySchema:
            - AttributeName: picker_id
              KeyType: HASH
            - AttributeName: order_created_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: PickSlipIdIndex
          KeySchema:
            - AttributeName: pick_slip_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  PickSlipsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PickSlips
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pick_slip_id
          AttributeType: S
      KeySchema:
        - AttributeName: pick_slip_id
          KeyType: HASH

  PackagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Packages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: package_id
          AttributeType: S
        - AttributeName: tq_employee_id
          AttributeType: S
      KeySchema:
        - AttributeName: package_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TqEmployeeIndex
          KeySchema:
            - AttributeName: tq_employee_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  BinsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Bins
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: bin_id
          AttributeType: S
      KeySchema:
        - AttributeName: bin_id
          KeyType: HASH

  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Products
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH

  ApiKeysTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: ApiKeys
      PrimaryKey:
        Name: api_key
        Type: String

  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Items
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: rfid_id
          AttributeType: S
        - AttributeName: package_id
          AttributeType: S
      KeySchema:
        - AttributeName: rfid_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PackageIdIndex
          KeySchema:
            - AttributeName: package_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # ─────── Lambda Authorizer ───────

  AuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      # 모든 스테이지·메서드에서 호출 가능하게 허용
      # SourceArn: !Sub
      #   arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorizer.app.lambda_handler
      CodeUri: src
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt ApiKeysTable.Arn

  # ─────── API Gateway ───────

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: StoringOrdersAPI
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,GET,POST,PUT'"
      
  # ─────── Business Lambdas ───────

  BinAllocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bin_allocation.app.lambda_handler
      CodeUri: src
      Events:
        BinAllocation:
          Type: Api
          Properties:
            Path: /bin-allocation
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BinsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable

  ReadStoringOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read_storing_orders.app.lambda_handler
      CodeUri: src
      Events:
        ReadStoringOrders:
          Type: Api
          Properties:
            Path: /storing-orders
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StoringOrdersTable
        - DynamoDBReadPolicy:
            TableName: !Ref PackagesTable
        - DynamoDBReadPolicy:
            TableName: !Ref BinsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTable

  ReadPackagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read_packages.app.lambda_handler
      CodeUri: src
      Events:
        ReadPackages:
          Type: Api
          Properties:
            Path: /packages
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackagesTable

  ReceiveOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: receive_order.app.lambda_handler
      CodeUri: src
      Events:
        ReceiveOrder:
          Type: Api
          Properties:
            Path: /storing-orders/receive
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StoringOrdersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable

  UpdateDiscrepancyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_discrepancy.app.lambda_handler
      CodeUri: src
      Events:
        UpdateDiscrepancy:
          Type: Api
          Properties:
            Path: /storing-orders/discrepancy
            Method: put
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StoringOrdersTable

  GetApiKeyRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_api_key_record.app.lambda_handler
      CodeUri: src
      Events:
        GetApiKeyRecord:
          Type: Api
          Properties:
            Path: /api-key
            Method: get
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ApiKeysTable

  TqQualityCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tq_quality_check.app.lambda_handler
      CodeUri: src
      Events:
        TqQualityCheck:
          Type: Api
          Properties:
            Path: /tq-quality-check
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable

  TqRfidSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: tq-rfid-queue
  
  BinRfidSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: bin-rfid-queue

  TqRfidProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tq_rfid_producer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TqRfidSqsQueue.QueueName
      Environment:
        Variables:
          TQ_RFID_SQS_QUEUE_URL: !Ref TqRfidSqsQueue
  
  BinRfidProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bin_rfid_producer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BinRfidSqsQueue.QueueName
      Environment:
        Variables:
          BIN_RFID_SQS_QUEUE_URL: !Ref BinRfidSqsQueue

  TqRfidConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tq_rfid_consumer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt TqRfidSqsQueue.Arn
            BatchSize: 10
      Environment:
        Variables:
          ITEMS_TABLE: !Ref ItemsTable
          PACKAGES_TABLE: !Ref PackagesTable
  
  BinRfidConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bin_rfid_consumer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt BinRfidSqsQueue.Arn
            BatchSize: 10
      Environment:
        Variables:
          ITEMS_TABLE: !Ref ItemsTable
          PACKAGES_TABLE: !Ref PackagesTable

  GetPackageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_package.lambda_function.lambda_handler
      CodeUri: src
      Events:
        GetPackage:
          Type: Api
          Properties:
            Path: /package/{package_id}
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackagesTable

  StoringOrdersOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        StoringOrdersOptions:
          Type: Api
          Properties:
            Path: /storing-orders
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
  
  PackagesOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        PackagesOptions:
          Type: Api
          Properties:
            Path: /packages
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE

  PackageOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        PackageOptions:
          Type: Api
          Properties:
            Path: /package/{package_id}
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
  
  BinAllocationOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        BinAllocationOptions:
          Type: Api
          Properties:
            Path: /bin-allocation
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE

  TqQualityCheckOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        TqQualityCheckOptions:
          Type: Api
          Properties:
            Path: /tq-quality-check
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
  
  UpdateDiscrepancyOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        UpdateDiscrepancyOptions:
          Type: Api
          Properties:
            Path: /storing-orders/discrepancy
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE

  ReceiveOrderOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        ReceiveOrderOptions:
          Type: Api
          Properties:
            Path: /storing-orders/receive
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE

  ReadPickSlipsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read_pick_slips.app.lambda_handler
      CodeUri: src
      Events:
        ReadPickSlips:
          Type: Api
          Properties:
            Path: /pick-slips
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PickSlipsTable

  ReadPickOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read_pick_orders.app.lambda_handler
      CodeUri: src
      Events:
        ReadPickOrders:
          Type: Api
          Properties:
            Path: /pick-orders
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PickOrdersTable

  GetNextPickOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_next_pick_order.app.lambda_handler
      CodeUri: src
      Events:
        GetNextPickOrder:
          Type: Api
          Properties:
            Path: /next-pick-order
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PickOrdersTable

  PickSlipsOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        PickSlipsOptions:
          Type: Api
          Properties:
            Path: /pick-slips
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE

  PickOrdersOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        PickOrdersOptions:
          Type: Api
          Properties:
            Path: /pick-orders
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE

  GetNextPickOrderOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        GetNextPickOrderOptions:
          Type: Api
          Properties:
            Path: /next-pick-order
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE

  ClosePickOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: close_pick_order.app.lambda_handler
      CodeUri: src
      Events:
        ClosePickOrder:
          Type: Api
          Properties:
            Path: /pick-orders/{pick_order_id}/close
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PickOrdersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PickSlipsTable

  ClosePickOrderOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        ClosePickOrderOptions:
          Type: Api
          Properties:
            Path: /pick-orders/{pick_order_id}/close
            Method: options
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE

Outputs:
  ApiUrl:
    Description: "Invoke URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  IotCoreEndpoint:
    Description: "IoT Core Data Endpoint"
    Value: "avt319l6989mq-ats.iot.us-east-2.amazonaws.com"
