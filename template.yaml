AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  StoringOrders/Packages backend with API Key→Role mapping.

Globals:
  Function:
    Runtime: python3.9
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        STORING_ORDERS_TABLE: !Ref StoringOrdersTable
        PACKAGES_TABLE:       !Ref PackagesTable
        API_KEYS_TABLE:       !Ref ApiKeysTable

Resources:

  # ─────── DynamoDB Tables ───────
  StoringOrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StoringOrders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: storing_order_id
          AttributeType: S
        - AttributeName: receiver_id
          AttributeType: S
      KeySchema:
        - AttributeName: storing_order_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ReceiverIndex
          KeySchema:
            - AttributeName: receiver_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  PackagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Packages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: package_id
          AttributeType: S
        - AttributeName: storing_order_id
          AttributeType: S
      KeySchema:
        - AttributeName: package_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StoringOrderIndex
          KeySchema:
            - AttributeName: storing_order_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ApiKeysTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: ApiKeys
      PrimaryKey:
        Name: api_key
        Type: String

  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Items
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: rfid_id
          AttributeType: S
      KeySchema:
        - AttributeName: rfid_id
          KeyType: HASH

  # ─────── Lambda Authorizer ───────

  AuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      # 모든 스테이지·메서드에서 호출 가능하게 허용
      # SourceArn: !Sub
      #   arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorizer.app.lambda_handler
      CodeUri: src
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt ApiKeysTable.Arn

  # ─────── API Gateway ───────

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: StoringOrdersAPI
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - x-api-key
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,GET,POST,PUT'"
      
  # ─────── Business Lambdas ───────

  ReadStoringOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read_storing_orders.app.lambda_handler
      CodeUri: src
      Events:
        ReadStoringOrders:
          Type: Api
          Properties:
            Path: /storing-orders
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StoringOrdersTable

  ReceiveOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: receive_order.app.lambda_handler
      CodeUri: src
      Events:
        ReceiveOrder:
          Type: Api
          Properties:
            Path: /storing-orders/receive
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StoringOrdersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable

  UpdateDiscrepancyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_discrepancy.app.lambda_handler
      CodeUri: src
      Events:
        UpdateDiscrepancy:
          Type: Api
          Properties:
            Path: /storing-orders/discrepancy
            Method: put
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StoringOrdersTable

  GetApiKeyRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_api_key_record.app.lambda_handler
      CodeUri: src
      Events:
        GetApiKeyRecord:
          Type: Api
          Properties:
            Path: /api-key
            Method: get
            RestApiId: !Ref Api
            Auth:
              Authorizer: NONE
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ApiKeysTable

  TqQualityCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: tq_quality_check.app.lambda_handler
      CodeUri: src
      Events:
        TqQualityCheck:
          Type: Api
          Properties:
            Path: /tq-quality-check
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable

  RfidSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: rfid-queue

  RfidProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rfid_producer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt RfidSqsQueue.QueueName
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref RfidSqsQueue

  RfidConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rfid_consumer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt RfidSqsQueue.Arn
            BatchSize: 10

Outputs:
  ApiUrl:
    Description: "Invoke URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  IotCoreEndpoint:
    Description: "IoT Core Data Endpoint"
    Value: "avt319l6989mq-ats.iot.us-east-2.amazonaws.com"
