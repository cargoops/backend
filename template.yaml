AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  StoringOrders/Packages backend with API Key→Role mapping.

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        STORING_ORDERS_TABLE: !Ref StoringOrdersTable
        PACKAGES_TABLE:       !Ref PackagesTable
        API_KEYS_TABLE:       !Ref ApiKeysTable
        ITEMS_TABLE:          !Ref ItemsTable
        BINS_TABLE:           !Ref BinsTable
        PRODUCTS_TABLE:       !Ref ProductsTable
        INVENTORY_TABLE:      !Ref InventoryTable
        PICK_ORDERS_TABLE:    !Ref PickOrdersTable
        PICK_SLIPS_TABLE:     !Ref PickSlipsTable

Resources:

  # ─────── DynamoDB Tables ───────
  StoringOrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: StoringOrders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: storing_order_id
          AttributeType: S
        - AttributeName: receiver_id
          AttributeType: S
      KeySchema:
        - AttributeName: storing_order_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ReceiverIndex
          KeySchema:
            - AttributeName: receiver_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  InventoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Inventory
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: bin_id
          AttributeType: S
        - AttributeName: product_id
          AttributeType: S
        - AttributeName: quantity
          AttributeType: N
      KeySchema:
        - AttributeName: bin_id
          KeyType: HASH
        - AttributeName: product_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: ProductQuantityIndex
          KeySchema:
            - AttributeName: product_id
              KeyType: HASH
            - AttributeName: quantity
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  PickOrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PickOrders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pick_order_id
          AttributeType: S
        - AttributeName: picker_id
          AttributeType: S
        - AttributeName: order_created_date
          AttributeType: S
        - AttributeName: pick_slip_id
          AttributeType: S
      KeySchema:
        - AttributeName: pick_order_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PickerStatusDateIndex
          KeySchema:
            - AttributeName: picker_id
              KeyType: HASH
            - AttributeName: order_created_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: PickSlipIdIndex
          KeySchema:
            - AttributeName: pick_slip_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  PickSlipsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PickSlips
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pick_slip_id
          AttributeType: S
      KeySchema:
        - AttributeName: pick_slip_id
          KeyType: HASH

  PackagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Packages
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: package_id
          AttributeType: S
        - AttributeName: tq_employee_id
          AttributeType: S
      KeySchema:
        - AttributeName: package_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TqEmployeeIndex
          KeySchema:
            - AttributeName: tq_employee_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  BinsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Bins
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: bin_id
          AttributeType: S
      KeySchema:
        - AttributeName: bin_id
          KeyType: HASH

  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Products
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH

  ApiKeysTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: ApiKeys
      PrimaryKey:
        Name: api_key
        Type: String

  ItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Items
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: rfid_id
          AttributeType: S
        - AttributeName: package_id
          AttributeType: S
      KeySchema:
        - AttributeName: rfid_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PackageIdIndex
          KeySchema:
            - AttributeName: package_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # ─────── API Gateway ───────

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: StoringOrdersAPI
      StageName: Prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,GET,POST,PUT'"
      
  # ─────── Business Lambdas ───────

  BinAllocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Allocate bins for packages (role: binner)"
      Handler: bin_allocation.app.lambda_handler
      CodeUri: src
      Events:
        BinAllocation:
          Type: Api
          Properties:
            Path: /bin-allocation
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BinsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProductsTable

  ReadStoringOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Read storing orders (role: receiver/admin)"
      Handler: read_storing_orders.app.lambda_handler
      CodeUri: src
      Events:
        ReadStoringOrders:
          Type: Api
          Properties:
            Path: /storing-orders
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StoringOrdersTable
        - DynamoDBReadPolicy:
            TableName: !Ref PackagesTable
        - DynamoDBReadPolicy:
            TableName: !Ref BinsTable
        - DynamoDBReadPolicy:
            TableName: !Ref ProductsTable

  ReadPackagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Read packages (role: any authenticated)"
      Handler: read_packages.app.lambda_handler
      CodeUri: src
      Events:
        ReadPackages:
          Type: Api
          Properties:
            Path: /packages
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackagesTable

  ReceiveOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Receive storing order (role: receiver)"
      Handler: receive_order.app.lambda_handler
      CodeUri: src
      Events:
        ReceiveOrder:
          Type: Api
          Properties:
            Path: /storing-orders/receive
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StoringOrdersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable

  UpdateDiscrepancyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Update discrepancy for storing order (role: receiver)"
      Handler: update_discrepancy.app.lambda_handler
      CodeUri: src
      Events:
        UpdateDiscrepancy:
          Type: Api
          Properties:
            Path: /storing-orders/discrepancy
            Method: put
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref StoringOrdersTable

  GetApiKeyRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Get API key record (no auth)"
      Handler: get_api_key_record.app.lambda_handler
      CodeUri: src
      Events:
        GetApiKeyRecord:
          Type: Api
          Properties:
            Path: /api-key
            Method: get
            RestApiId: !Ref Api
      Policies:
         - DynamoDBReadPolicy:
             TableName: !Ref ApiKeysTable

  TqQualityCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "TQ quality check for package (role: tq_employee)"
      Handler: tq_quality_check.app.lambda_handler
      CodeUri: src
      Events:
        TqQualityCheck:
          Type: Api
          Properties:
            Path: /tq-quality-check
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable

  TqRfidSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: tq-rfid-queue
  
  BinRfidSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: bin-rfid-queue

  TqRfidProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Produce SQS message for TQ RFID"
      Handler: tq_rfid_producer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TqRfidSqsQueue.QueueName
      Environment:
        Variables:
          TQ_RFID_SQS_QUEUE_URL: !Ref TqRfidSqsQueue
  
  BinRfidProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Produce SQS message for Bin RFID"
      Handler: bin_rfid_producer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt BinRfidSqsQueue.QueueName
      Environment:
        Variables:
          BIN_RFID_SQS_QUEUE_URL: !Ref BinRfidSqsQueue

  TqRfidConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Consume SQS message for TQ RFID and update tables"
      Handler: tq_rfid_consumer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt TqRfidSqsQueue.Arn
            BatchSize: 10
      Environment:
        Variables:
          ITEMS_TABLE: !Ref ItemsTable
          PACKAGES_TABLE: !Ref PackagesTable
  
  BinRfidConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Consume SQS message for Bin RFID and update tables"
      Handler: bin_rfid_consumer.lambda_handler
      Runtime: python3.9
      CodeUri: src
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt BinRfidSqsQueue.Arn
            BatchSize: 10
      Environment:
        Variables:
          ITEMS_TABLE: !Ref ItemsTable
          PACKAGES_TABLE: !Ref PackagesTable

  GetPackageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Get package details (role: any authenticated)"
      Handler: get_package.lambda_function.lambda_handler
      CodeUri: src
      Events:
        GetPackage:
          Type: Api
          Properties:
            Path: /package/{package_id}
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PackagesTable

  StoringOrdersOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for storing orders"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        StoringOrdersOptions:
          Type: Api
          Properties:
            Path: /storing-orders
            Method: options
            RestApiId: !Ref Api
  
  PackagesOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for packages"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        PackagesOptions:
          Type: Api
          Properties:
            Path: /packages
            Method: options
            RestApiId: !Ref Api

  PackageOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for package detail"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        PackageOptions:
          Type: Api
          Properties:
            Path: /package/{package_id}
            Method: options
            RestApiId: !Ref Api
  
  BinAllocationOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for bin allocation"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        BinAllocationOptions:
          Type: Api
          Properties:
            Path: /bin-allocation
            Method: options
            RestApiId: !Ref Api

  TqQualityCheckOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for TQ quality check"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        TqQualityCheckOptions:
          Type: Api
          Properties:
            Path: /tq-quality-check
            Method: options
            RestApiId: !Ref Api
  
  UpdateDiscrepancyOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for update discrepancy"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        UpdateDiscrepancyOptions:
          Type: Api
          Properties:
            Path: /storing-orders/discrepancy
            Method: options
            RestApiId: !Ref Api

  ReceiveOrderOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for receive order"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        ReceiveOrderOptions:
          Type: Api
          Properties:
            Path: /storing-orders/receive
            Method: options
            RestApiId: !Ref Api

  ReadPickSlipsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Read all pick slips (role: admin)"
      Handler: read_pick_slips.app.lambda_handler
      CodeUri: src
      Events:
        ReadPickSlips:
          Type: Api
          Properties:
            Path: /pick-slips
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PickSlipsTable

  ReadPickOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Read all pick orders (role: admin)"
      Handler: read_pick_orders.app.lambda_handler
      CodeUri: src
      Events:
        ReadPickOrders:
          Type: Api
          Properties:
            Path: /pick-orders
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PickOrdersTable

  GetNextPickOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Get next pick order for picker (role: picker)"
      Handler: get_next_pick_order.app.lambda_handler
      CodeUri: src
      Events:
        GetNextPickOrder:
          Type: Api
          Properties:
            Path: /next-pick-order
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PickOrdersTable

  PickSlipsOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for pick slips"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        PickSlipsOptions:
          Type: Api
          Properties:
            Path: /pick-slips
            Method: options
            RestApiId: !Ref Api

  PickOrdersOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for pick orders"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        PickOrdersOptions:
          Type: Api
          Properties:
            Path: /pick-orders
            Method: options
            RestApiId: !Ref Api

  GetNextPickOrderOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for get next pick order"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        GetNextPickOrderOptions:
          Type: Api
          Properties:
            Path: /next-pick-order
            Method: options
            RestApiId: !Ref Api

  ClosePickOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Close pick order (role: picker)"
      Handler: close_pick_order.app.lambda_handler
      CodeUri: src
      Events:
        ClosePickOrder:
          Type: Api
          Properties:
            Path: /pick-orders/{pick_order_id}/close
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PickOrdersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PickSlipsTable

  ClosePickOrderOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for closing pick order"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        ClosePickOrderOptions:
          Type: Api
          Properties:
            Path: /pick-orders/{pick_order_id}/close
            Method: options
            RestApiId: !Ref Api

  StartPackingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Start packing for the oldest pick slip in a zone (role: packer)"
      Handler: start_packing.app.lambda_handler
      CodeUri: src
      Events:
        StartPacking:
          Type: Api
          Properties:
            Path: /packing/start
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PickSlipsTable

  StartPackingOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for start packing"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        StartPackingOptions:
          Type: Api
          Properties:
            Path: /packing/start
            Method: options
            RestApiId: !Ref Api

  ClosePackingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Close packing for a pick slip (role: packer)"
      Handler: close_packing.app.lambda_handler
      CodeUri: src
      Events:
        ClosePacking:
          Type: Api
          Properties:
            Path: /packing/{pick_slip_id}/close
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PickSlipsTable

  ClosePackingOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for close packing"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        ClosePackingOptions:
          Type: Api
          Properties:
            Path: /packing/{pick_slip_id}/close
            Method: options
            RestApiId: !Ref Api

  DispatchPickSlipFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Dispatch a pick slip (role: dispatcher)"
      Handler: dispatch_pick_slip.app.lambda_handler
      CodeUri: src
      Events:
        DispatchPickSlip:
          Type: Api
          Properties:
            Path: /pick-slips/{pick_slip_id}/dispatch
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PickSlipsTable

  DispatchPickSlipOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for dispatch pick slip"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        DispatchPickSlipOptions:
          Type: Api
          Properties:
            Path: /pick-slips/{pick_slip_id}/dispatch
            Method: options
            RestApiId: !Ref Api

  CloseBinningFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Close binning for a package (role: binner)"
      Handler: close_binning.app.lambda_handler
      CodeUri: src
      Events:
        CloseBinning:
          Type: Api
          Properties:
            Path: /packages/{package_id}/close-binning
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PackagesTable

  CloseBinningOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for close binning"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        CloseBinningOptions:
          Type: Api
          Properties:
            Path: /packages/{package_id}/close-binning
            Method: options
            RestApiId: !Ref Api

  ReadInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Read all inventory (role: admin)"
      Handler: read_inventory.app.lambda_handler
      CodeUri: src
      Events:
        ReadInventory:
          Type: Api
          Properties:
            Path: /inventory
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref InventoryTable

  InventoryOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: "CORS/OPTIONS handler for inventory"
      Handler: options_handler.lambda_handler
      CodeUri: src
      Events:
        InventoryOptions:
          Type: Api
          Properties:
            Path: /inventory
            Method: options
            RestApiId: !Ref Api

Outputs:
  ApiUrl:
    Description: "Invoke URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  IotCoreEndpoint:
    Description: "IoT Core Data Endpoint"
    Value: "avt319l6989mq-ats.iot.us-east-2.amazonaws.com"
