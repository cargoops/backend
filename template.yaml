AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  StoringOrders/Packages backend with API Key→Role mapping.

Globals:
  Function:
    Runtime: python3.9
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        STORING_ORDERS_TABLE: !Ref StoringOrdersTable
        PACKAGES_TABLE:       !Ref PackagesTable
        API_KEYS_TABLE:       !Ref ApiKeysTable

Resources:

  # ─────── DynamoDB Tables ───────

  StoringOrdersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: StoringOrders
      PrimaryKey:
        Name: storing_order_id
        Type: String
      # so we can Query by receiver_id
      SecondaryIndexes:
        - IndexName: ReceiverIndex
          KeySchema:
            - AttributeName: receiver_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  PackagesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Packages
      PrimaryKey:
        Name: package_id
        Type: String
      SecondaryIndexes:
        - IndexName: StoringOrderIndex
          KeySchema:
            - AttributeName: storing_order_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ApiKeysTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: ApiKeys
      PrimaryKey:
        Name: api_key
        Type: String

  # ─────── Lambda Authorizer ───────

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorizer.app.lambda_handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt ApiKeysTable.Arn

  # ─────── API Gateway ───────

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: StoringOrdersAPI
      StageName: Prod
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - x-api-key
      Cors:
        AllowOrigin:  "'*'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,GET,POST,PUT'"
      DefinitionBody:
        openapi: '3.0.1'
        info:
          title: StoringOrders API
          version: 1.0
        paths:
          /storing-orders:
            get:
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda
                  /path/2015-03-31/functions/${ReadStoringOrdersFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

          /storing-orders/receive:
            post:
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda
                  /path/2015-03-31/functions/${ReceiveOrderFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

          /storing-orders/discrepancy:
            put:
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda
                  /path/2015-03-31/functions/${UpdateDiscrepancyFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

  # ─────── Business Lambdas ───────

  ReadStoringOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read_storing_orders.app.lambda_handler
      Events:
        ReadStoringOrders:
          Type: Api
          Properties:
            Path: /storing-orders
            Method: get
            RestApiId: !Ref Api
      Policies:
        - DynamoDBReadPolicy:
            TableName: StoringOrdersTable
        - DynamoDBQueryPolicy:
            TableName: StoringOrdersTable

  ReceiveOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: receive_order.app.lambda_handler
      Events:
        ReceiveOrder:
          Type: Api
          Properties:
            Path: /storing-orders/receive
            Method: post
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: StoringOrdersTable
        - DynamoDBCrudPolicy:
            TableName: PackagesTable

  UpdateDiscrepancyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_discrepancy.app.lambda_handler
      Events:
        UpdateDiscrepancy:
          Type: Api
          Properties:
            Path: /storing-orders/discrepancy
            Method: put
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: StoringOrdersTable

Outputs:
  ApiUrl:
    Description: "Invoke URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod"
